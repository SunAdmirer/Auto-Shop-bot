import decimal

from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hlink, hcode

from django_project.telegrambot.usersmanage.models import Goods
from keyboards.inline import mono_keyboard_markup
from keyboards.inline.payments_keyboard import verification_cd
from keyboards.inline.purchases_keyboard import order_cd
from loader import dp
from aiogram.types import Message, CallbackQuery

from utils.database.commands.commands_fpurchase import add_failed_purchase
from utils.database.commands.commands_goods import select_goods_by_pk
from utils.database.commands.commands_payment import select_payment
from utils.database.commands.commands_spurchase import add_successful_purchase
from utils.database.commands.commands_user import select_user, update_user_ordered, update_user_successful_purchases
from utils.misc.monobank import MonoPayment, NoPaymentFound, NotEnoughMoney, Payment


@dp.callback_query_handler(order_cd.filter())
async def purchase_order_menu(call: CallbackQuery, state: FSMContext, callback_data: dict):
    await call.answer()

    goods_pk = callback_data.get("goods_pk")
    city = callback_data.get("city")
    address = callback_data.get("address")
    quantity = int(callback_data.get("quantity"))
    payment = callback_data.get("payment")
    amount_cost = callback_data.get("amount_cost")

    goods: Goods = await select_goods_by_pk(goods_pk)

    template = ""
    markup = await mono_keyboard_markup()

    if payment == "monobank":
        mono_payment = MonoPayment(amount_cost=amount_cost, goods_pk=goods_pk, city=city,
                                   address=address, quantity=quantity, payment=payment)
        invoice_mono = mono_payment.monobank_payment()

        template = f"<b>{goods.name}</b>\n\n" \
                   f"–¶–µ–Ω–∞ –∑–∞ 1 —à—Ç: {goods.cost} –≥—Ä–Ω\n" \
                   f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ: <b>{quantity}</b>\n" \
                   f"<b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {amount_cost} –≥—Ä–Ω</b>\n\n" \
                   f"–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: <b>{city}. {address}</b>\n\n" \
                   f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <b>{payment}</b>\n\n" \
                   f"–û–ø–ª–∞—Ç–∏—Ç–µ {amount_cost} –≥—Ä–Ω –ø–æ —Å—Å—ã–ª–∫–µ üëâüèªüëâüèªüëâüèª{hlink(title='–æ–ø–ª–∞—Ç–∏—Ç—å', url=invoice_mono)}üëàüèªüëàüèªüëàüèª\n\n" \
                   f"–ò –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n" \
                   f"{hcode(mono_payment.unique_comment)}\n\n" \
                   f"–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û–ø–ª–∞—Ç–∏–ª\"."

        await state.set_state("verification")
        await state.update_data(payment=mono_payment)

    if goods.photo_url == '':
        await call.message.edit_text(text=template, reply_markup=markup)
    else:
        await call.message.edit_caption(caption=template, reply_markup=markup)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
@dp.callback_query_handler(verification_cd.filter(status="paid"), state="verification")
async def purchase_paid(call: CallbackQuery, state: FSMContext):
    await call.answer()
    payment: Payment = (await state.get_data()).get("payment")

    try:
        if payment.payment == "monobank":
            payment.check_payment_mono()
    except NoPaymentFound:
        await call.message.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    except NotEnoughMoney:
        await call.message.answer("–û–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–∞ –º–µ–Ω—å—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π.")
        return

    else:
        await info_to_db_about_purchase(call, state, payment, status=True)

        goods: Goods = await select_goods_by_pk(payment.goods_pk)
        await call.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ —Ç–æ–≤–∞—Ä: <b>{goods.name}</b> - {payment.quantity} —à—Ç.\n\n"
                                  f"–ê–¥—Ä–µ—Å: {payment.address}\n"
                                  f"–°—É–º–∞ –∑–∞–∫–∞–∑–∞: {payment.amount_cost} –≥—Ä–Ω.\n"
                                  f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment.payment}")


# –û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(verification_cd.filter(status="cancel"), state="verification")
async def purchase_cancel(call: CallbackQuery, state: FSMContext):
    await call.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É!", show_alert=True)
    payment: Payment = (await state.get_data()).get("payment")

    await info_to_db_about_purchase(call, state, payment, status=False)


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ '–û–ø–ª–∞—á–µ–Ω —Ç–æ–≤–∞—Ä –∏–ª–∏ –ø–æ–∫—É–ø–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'
async def info_to_db_about_purchase(call: CallbackQuery, state: FSMContext, payment: Payment, status: bool):
    await call.message.delete()
    await state.finish()

    chat_id = call.from_user.id
    user = await select_user(chat_id=chat_id)
    selected_payment = await select_payment(payment=payment.payment)

    if status:
        await add_successful_purchase(chat_id=user, goods_id=payment.goods_pk, quantity=payment.quantity,
                                      amount_cost=payment.amount_cost, payment=selected_payment)

        # –ò–∑–º–∏–Ω–µ–Ω–∏–µ –∫–æ–ª-–≤–æ —É—Å–ø–µ—à–Ω. –ø–æ–∫—É–ø–æ–∫, —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏ —Ç.–¥. –∏ —Ç.–ø.
        user.successful_purchases = user.successful_purchases + 1
        # await update_user_successful_purchases(chat_id, new_quantity)

        goods: Goods = await select_goods_by_pk(payment.goods_pk)
        goods.quantity = goods.quantity - payment.quantity
        goods.save()

        if not user.ordered:
            user.ordered = True
            # await update_user_ordered(chat_id=chat_id)
        user.save()
    else:
        await add_failed_purchase(chat_id=user, goods_id=payment.goods_pk, quantity=payment.quantity,
                                  amount_cost=payment.amount_cost, payment=selected_payment)
